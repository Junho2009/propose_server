###############################################################################
#                MudOS V22pre11的可定制运行配置文件                           #
###############################################################################
# 请注意: 本文件中所有的路径(Mudlib 和 Binaries除外)都是指Mudlib下的相对路径  #
# 以 # 或者换行开头的行是被注释掉的                                           #
###############################################################################
 
# 本泥巴的名称
name : mymud
 
# 定义用来接受玩家连线的端
# port number : 3333
external_port_1: telnet 5555
external_port_2: telnet 9999

# 定义地址服务器的 ip 和端口
# 地址服务的作用是：转换网路上其他泥巴的名称为数字ip
# 请选择一个未被使用端口
address server ip : localhost
address server port : 3890
 
# 定义 mudlib 的绝对路径名
mudlib directory : D:\src\github\propose\propose_server\mymud\lib
# 驱动/配置 文件所在目录的绝对路径名
binary directory : D:\src\github\propose\propose_server\mymud\config.cfg
 
# 定义用来 储存 调试结果 和 作者/区域 状态 的目录
log directory : /log

# 此目录下的文件将被头文件格式 #include <...> 搜索
# 如果需要定义多个目录，请用 : 将他们分隔开
include directories : /include
 
# 此目录用来储存 binaries (定义了 BINARIES 时有效)
save binaries directory : /binaries
 
# 此文件定义 Master Object
master file : /singleton/master

# 此文件在编译时将被所有文件自动包含
global include file : <globals.h>

# 此文件定义外部 Efun
simulated efun file : /singleton/simul_efun
 
# 此文件将暂时保存被清理的物件，当交换时间(swap time)未被定义时不起作用
swap file : /adm/tmp/swapfile
 
# 定义调试结果储存文件名 (未定义记录目录 log directory 时无效)
debug log file : debug.log

# 如果一个文件超过了以下定义的时间未被呼叫，mudos 将呼叫其上的
# clean_up 功能。Clean_up 功能可以定义为各种效果，例如摧毁此物件等。
# 但当该物件没有 clean_up 的功能时无效。
# 建议将此时间定义为大于以下将定义的交换时间(time to swap)
time to clean up : 600
 
# 定义一个未被呼叫的物件经过多长时间被交换出去。
# 以下是几种情况的相应建议
# 玩家人数过多而内存很少的服务器: 900 (15 分钟)
# 玩家人数不多而内存很大的服务器: 10000
# 内存极大的服务器: 0 (never swap).
time to swap : 10000 
 
# 定义一物件被重置的时间。
time to reset : 900
 
# 定义二进制域内所包含数值的最大数量，二进制数值将储存在可输出的字符串中，
# 每字节可以储存六位。
maximum bits in a bitfield : 1200
 
# 定义每个函数中局部变量的最大数目。
maximum local variables : 100
 
# 定义 每个线程中 eval cost 的最大数量，当运行中值超过该数目时
# 将停止运行。
# 鉴于服务器负担沉重，将此数值放大以度过难关。(By Annihilator)
#maximum evaluation cost : 100000
maximum evaluation cost : 9999999
 
# 定义单个数组的最大尺寸。
maximum array size : 30000

# 定义变量类型 buffer 尺寸的最大值。
maximum buffer size : 600000
 
# 定义映射尺寸的最大值。
maximum mapping size : 30000
 
# 定义继承链的最大值。
inherit chain size : 60
 
# 定义字符型变量的最大长度。
maximum string length : 300000
 
# 定义 read_file() 所能读取的文件的最大尺寸。
maximum read file size : 300000
 
# 定义 read_bytes 和 write_bytes 所能操作的最大字节数。 
# and write_bytes
maximum byte transfer : 20000
 
# 定义保留的内存空间的大小，保留一块额外的内存能缓解内存溢出。
# 如果定义为 0 则不保留额外的内存
reserved size : 0
 
# 定义共享字符串散列表的大小。
# 此数值应当是一个素数，推荐在 1000 到 30000 之间。
# 如果你将其设置为接近使用的不同字符数的五分之一，你将得到一接近于 1 的
# 几率(比较标记来查找字符)，同时被找到的字符将自动被提取到表头。
# 由于不需要过大的数值，建议你使用一个较小的表。
hash table size : 7001
 
# 定义对象散列表的大小。
# 定义此数值和以上定义的字符串散列表内容相似。
# 如果将此数值设置成大约游戏中物件数目四分之一的值，作为分配存取的对象将
# 比字符串更加统一。
object table size : 1501
 
# 定义无匹配命令的动作时的提示信息。
default fail message : 什么？

# 定义当错误发生时默认的提示信息。(可选)
default error message : 你发现事情不大对了，但是又说不上来。

###############################################################################
#          以下定义当前尚未使用或实现(即无所谓的)                             #
###############################################################################

# 定义游戏的最大玩家数目。
maximum users : 200

# 定义机器的最大堆栈大小，此堆栈也将包含所以局部变量和参数。(尚未使用)
evaluator stack size : 1000
 
# 定义编译器的堆栈大小，此定义将影响编译器的分析能力。(尚未使用)
compiler stack size : 1000
 
# 定义函数的最大呼叫深度。(尚未使用)
maximum call depth : 50

# 定义活动对象的散列表，被 find_living() 使用。(尚未使用)
living hash table size : 1020